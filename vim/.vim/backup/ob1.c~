#include "header.h"

// lager en char array som inneholder alle vokaler
char vowel[] = {'a','e','i','o','u','y'};
char line[100];
int counter = 0;

// lager en struct som skal kunne peke rundt på neste linje
struct Node{
    char line[100];
    struct Node* next;
};


/* lager en methode som skal printe ut hele filen den får inn.
 * Den går gjennom hele lenkelisten og printer ut linjene underveis.
 */

void print_fi(struct Node* n){
    struct Node* tmp;
    printf("printing the file: \n");
    tmp = n;
    while(tmp->next != NULL){
        tmp = tmp->next;
        printf("   %s", tmp->line);
    }
    printf("\n");
}

/* lager en metode som skal kunne printe ut en tilfeldig linje fra det den 
 * har lest inn. srand(getpid()) setter start intervallet på algoritymen til random
 * getpid gir oss prossesorIDen til programmet og vil derfor gi et tilfeldig tall
 * hver gang programmet kjøres.
 */
int random_line(struct Node* n){
    struct Node* tmp;

    tmp = n;
    int i=0;
    srand(getpid());
    int a = (rand() %(counter-2) +1);
    tmp = tmp->next;
    for(i=0;i<a-1;i++){
        tmp = tmp->next;
    }
    printf("printing a random line: \n");
    printf("   %s", tmp->line);

    return 0;
}

// laget en sjekk metode som iterer gjennom vokalene og gir ut om det er en vokal
int check(char c){
    int i = 0;
    while (i < 6){
        if(c == vowel[i]){
            return 1;
        }
        i++;
    }
    return 0;
}

/* metode for å erstatte vokaler. bruker sjekk og erstatter vokalen i en fin
 * løkke. blir også laget en ny char array som skal holde på den nye teksten.
 */
int replace_vowel(struct Node* n){
    int i;
    int k;
    char newline[250];
    for (i = 0; i < 6; i++){
        struct Node* tmp;
        tmp = n;
        tmp=tmp->next;
        printf("replace vowels with %c \n", vowel[i]);
        while (tmp != NULL){
            for(k=0; tmp->line[k] != 0; k++){
                if(check(tmp->line[k])){
                    newline[k] = vowel[i];
                }else{
                    newline[k] = tmp->line[k];
                } 
            }
            newline[k] = 0;
            tmp = tmp->next;
            printf("  %s", newline);
        }
        printf("\n");
    }

    return 0;
}
/* metode som bruker check for å fjerne alle vokalene. Usikker på hvorfor det 
 * ikke dukket opp ekstra space, da jeg hadde tenkt å erstatte vokalen med space
 * for å så strippe alle space som gjentar seg. Dette fungerer, men litt usikker 
 * på hvorfor den fungerer slik jeg ønsket.
 */
int remove_vowel(struct Node* n){

    int k;
    char newline[250];
    struct Node* tmp;
    tmp = n;
    tmp=tmp->next;
    printf("delete all vowels \n");
    while (tmp != NULL){
        for(k=0; tmp->line[k] != 0; k++){
            if(check(tmp->line[k])){
                newline[k] = '\32';
            }else{
                newline[k] = tmp->line[k];
            } 
        }
        newline[k] = 0;
        tmp = tmp->next;
        printf("  %s", newline);
    }
    printf("\n");

    return 0;
}
/* metode for å gå gjennom hver linje og hvert tegn og teller opp antallet.
 */
int len_file(struct Node* n){

    int k;
    int lenght=0;
    struct Node* tmp;
    tmp = n;
    tmp=tmp->next;
    while (tmp != NULL){
        for(k=0; tmp->line[k] != 0; k++){
            lenght++;
        }
        tmp = tmp->next;
    }
    printf("the text is %d characters long \n", lenght);
    return 0;
}
/* metode jeg bruke for å lage en lenkeliste og sette neste linje nederst i
 * lenkelisten.
 */
int insert_line(char line[100], struct Node* n) {
    struct Node* tmp;
    tmp = n;

    while(tmp -> next != NULL) {
        tmp = tmp->next;
        counter++;
    }

    struct Node* r = malloc(sizeof(struct Node));
    strcpy(r->line, line);

    r->next = NULL;
    tmp -> next = r;
    return 0;
}

/* main metode som samler inn alt og utgjør om det er nok argumenter når 
 * programmet kjøres og hvilken kommando som blir gitt. Det første den gjør er
 * å sette inn i lenkelisten ROOT og lager nestepekere derfra. helt på slutten så
 * frigjør den minne til nodelisten
 */
int main(int argc, char* argv[]){

    struct Node* root = malloc(sizeof(struct Node));

    FILE* fi = fopen(argv[2], "r");

    while(fgets(line, sizeof(line), fi)){
        insert_line(line, root);
    }

    if(argc != 3){
        printf("System error - needs two arguments to work \n"
                "command, file \n");
    }
    if(strcmp(argv[1], "print") == 0) {
        print_fi(root);
    }
    else if (strcmp(argv[1], "random") == 0){
        random_line(root);
    }
    else if (strcmp(argv[1], "remove") == 0){
        remove_vowel(root);
    }
    else if(strcmp(argv[1], "replace") == 0) {
        replace_vowel(root);
    }
    else if(strcmp(argv[1], "len") == 0){
        len_file(root);
    }

    struct Node* tmp = root;
    while(root != NULL){
        tmp = root;
        root = root->next;
        free(tmp);
    }
    root = NULL;
    fclose(fi);
    return 0;
}
